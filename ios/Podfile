ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Specify platform to avoid CocoaPods auto-assigning it during install
platform :ios, '13.0'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# Helper to locate the Flutter SDK from the generated Xcode config
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. Run flutter pub get first."
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found."
end

require File.expand_path(File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper'), __FILE__)

flutter_ios_podfile_setup

# (Using Flutter's pod helper; ensure flutter pub get has been run so the helper exists.)

target 'Runner' do
  # If some plugin specifically requires modular headers, add that plugin's line only.
  # use_modular_headers!  # <-- avoid globally unless required

  flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))
end

post_install do |installer|
  # Call Flutter helper (sets correct build settings for Flutter pods)
  flutter_post_install(installer)

  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      # Ensure the deployment target is what you want:
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      # On Apple Silicon CI/simulators you may need to exclude arm64:
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
    end
  end
end
